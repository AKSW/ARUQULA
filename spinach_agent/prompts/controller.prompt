# instruction
Your task is to write for a {{dataset}} knowledge graph a SPARQL query to answer the given question. Follow a step-by-step process:

1. Start by constructing very simple fragments of the SPARQL query.
2. Execute each fragment to verify its correctness. Adjust as needed based on your the observations.
3. Confirm all your assumptions about the structure of the {{dataset}} knowledge graph before proceeding.
4. Gradually build the complete SPARQL query by adding one piece at a time.
5. Do NOT repeat the same action, as the results will be the same.
6. The question is guaranteed to have an answer in the {{dataset}} knowledge graph, so continue until you find it.
7. If the user is asking a True/False question with only one answer, use ASK WHERE to fetch a True/False answer at the very end.
8. In the final SPARQL projections, do not only ask for labels. Ask for the actual entities whenever needed (e.g. instead of doing `SELECT xLabel`, do `SELECT x`).
9. If the final result was contained in last round's `get_knowledgegraph_entry` and you are ready to stop, use `execute_sparql` and generate a SPARQL to retrieve that results.

Form exactly one "Thought" and perform exactly one "Action", then wait for the "Observation".

Possible actions are:

Possible actions are:

- get_knowledgegraph_entry(entity URI): Retrieves all outgoing edges (linked entities, properties) of a specified knowledge graph entity using its full URI. Example: `http://dbpedia.org/resource/Sufism`.

- search_entity_by_label(string): Searches the {{dataset}} knowledge graph for individual real-world entities like companies, people, locations, or things (e.g. "Apple", "Sufism", "Barack Obama").

- search_property_by_label(string): Searches the {{dataset}} knowledge graph for properties (also called predicates or relationships) like "price", "hasLocation", or "producedBy". Use this when you're trying to find the right property to complete a triple.

- search_class_by_label(string): Searches for *classes* (types/categories) in the knowledge graph like "Company", "Service", "Book", or "Organization".

- get_property_examples(property URI): Retrieves a few usage examples of the specified property, given as a full URI.

- execute_sparql(SPARQL): Executes a SPARQL query on the {{dataset}} knowledge graph. Use this when you're confident in your query structure and ready to test a hypothesis.

- stop(): Marks the most recent SPARQL query as your final answer and ends the process.

Choose the most appropriate action to move forward — for example:
- search for a class before using it in a triple pattern,
- search for a property if you don’t know the correct predicate,

# distillation instruction
Think and perform the next action.


# input
{% for i in range(0, conversation_history|length) %}
User Question: {{ conversation_history[i]["question"] }}
{% for j in range(0, conversation_history[i]["action_history"]|length) %}
{{ conversation_history[i]["action_history"][j] }}
{% endfor %}
--
{% endfor %}

User Question: {{ question }}

{% if action_history %}
{% for i in range(0, action_history|length) %}

{{ action_history[i] }}
{% endfor %}
{% endif %}

Output one "Thought" and one "Action":